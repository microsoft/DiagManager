# .NET Desktop


# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  Codeql.Enabled: true

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    # Update the pool with your team's 1ES hosted pool.
    pool:
      name: MSSecurity-1ES-Build-Agents-Pool  # Name of your hosted pool
      image:   # Name of the image in your pool. If not specified, first image of the pool is used
      os: windows  # OS of the image. This value cannot be a variable. Allowed values: windows, linux, macOS
    stages:
    - stage: Stage
      jobs:
      - job: ValidationTestsJob
        # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
        # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)
            artifactName: DiagManagerPipelineArtifacts
        # Define the steps that the pipeline will run.
        # In most cases, copy and paste the steps from the original pipeline.
        steps:
        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'


        - task: VSBuild@1
          inputs:
            solution: '$(solution)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'


        - task: AntiMalware@4
          inputs:
            InputType: 'Basic'
            ScanType: 'CustomScan'
            FileDirPath: '$(Build.StagingDirectory)'
            TreatSignatureUpdateFailureAs: 'Warning'
            SignatureFreshness: 'UpToDate'
            TreatStaleSignatureAs: 'Error'


        - task: CredScan@3
          
        - task: ComponentGovernanceComponentDetection@0
          inputs:
            scanType: 'Register'
            verbosity: 'Verbose'
            alertWarningLevel: 'High'

        - task: CodeMetrics@1
          inputs:
            Files: '$(Build.SourcesDirectory)\**\*.exe;$(Build.SourcesDirectory)\**\*.dll'

        # - task: Semmle@1
        #   inputs:
        #     sourceCodeDirectory: '$(Build.SourcesDirectory)'
        #     language: 'csharp'
        #     querySuite: 'Recommended'
        #     timeout: '1800'
        #     ram: '16384'
        #     addProjectDirToScanningExclusionList: true

        - task: CodeSign@1
          inputs:
            FailIfNoTargetsFound: 'false'

        - task: FxCop@2
          inputs:
            inputType: 'Basic'
            targets: '**\*.dll;**\*.exe'

        - task: Guardian@1
          
        - task: SdtReport@2
          inputs:
            GdnExportHtmlFile: true
            GdnExportAllTools: true

        - task: RoslynAnalyzers@3
          inputs:
            userProvideBuildInfo: 'autoMsBuildInfo'
            setupCommandlinePicker: 'vs2019'
            rulesetName: 'Required'
          env:
            SYSTEM_ACCESSTOKEN: $(system.accesstoken)


        - task: PSScriptAnalyzer@1
          inputs:
            Path: '$(Build.SourcesDirectory)'
            Settings: 'required'
            Recurse: true

        - task: VulnerabilityAssessment@0

        - task: PostAnalysis@2
          inputs:
            GdnBreakAllTools: true


        - task: ManifestGeneratorTask@0
          inputs:
            BuildDropPath: '$(Build.ArtifactStagingDirectory)'

        - task: VSTest@2
          inputs:
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              # Write your PowerShell commands here.
              
              Write-Host "Hello World"