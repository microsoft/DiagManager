# .NET Desktop


# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  Codeql.Enabled: true

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: CodeQL3000Init@0

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
- task: CodeQL3000Finalize@0

- task: AntiMalware@4
  inputs:
    InputType: 'Basic'
    ScanType: 'CustomScan'
    FileDirPath: '$(Build.StagingDirectory)'
    TreatSignatureUpdateFailureAs: 'Warning'
    SignatureFreshness: 'UpToDate'
    TreatStaleSignatureAs: 'Error'
- task: APIScan@2
  inputs:
    softwareFolder: '$(Build.StagingDirectory)'
    softwareBuildNum: '$(Build.BuildId)'
    symbolsFolder: 'SRV*http://symweb'
- task: AutoApplicability@1
  inputs:
    VerboseWriter: true
    ExternalRelease: true
    IsSoftware: true
- task: Bandit@1
  inputs:
    targetsType: 'guardianGlob'
    targets: 'f|**/*.py;-|.gdn/**'
    ruleset: 'guardian'

- task: BinSkim@4
  inputs:
    InputType: 'Basic'
    Function: 'analyze'
    TargetPattern: 'guardianGlob'
    AnalyzeTargetGlob: '$(Build.ArtifactStagingDirectory)/**.dll;$(Build.ArtifactStagingDirectory)/**.exe;'


- task: CodeInspector@2
  inputs:
    ProductId: '59b7062b-7db3-4c47-b5c7-0a27bcb2e108'
- task: CodeMetrics@1
  inputs:
    Files: '$(Build.SourcesDirectory)\**\*.exe;$(Build.SourcesDirectory)\**\*.dll'

- task: Semmle@1
  inputs:
    sourceCodeDirectory: '$(Build.SourcesDirectory)'
    language: 'csharp'
    querySuite: 'Recommended'
    timeout: '1800'
    ram: '16384'
    addProjectDirToScanningExclusionList: true

- task: CodeSign@1


- task: CredScan@3
  

- task: Detekt@1
  inputs:
    targets: '$(Build.SourcesDirectory)'

- task: ESLint@2
  inputs:
    toolVersion: '8.0.0-latest'
    TargetType: 'eslint'
    ExitOnFatalError: true

- task: Flawfinder@2
  inputs:
    targetPatternType: 'flawfinderPattern'
    targetFlawfinderPattern: '$(Build.SourcesDirectory)'

- task: FxCop@2
  inputs:
    inputType: 'CommandLine'


- task: Guardian@1
  

- task: PostAnalysis@2
  inputs:
    GdnBreakAllTools: true

- task: RoslynAnalyzers@3
  inputs:
    userProvideBuildInfo: 'msBuildInfo'
    msBuildVersion: '16.0'
    msBuildArchitecture: 'amd64'

- task: SdtReport@2
  inputs:
    GdnExportAllTools: true

- task: InferSharp@1
  inputs:
    TargetDirectory: '$(Build.ArtifactStagingDirectory)'

- task: MSRD@1
  inputs:
    OSPlatformType: 'Windows'
    WindowsEdition: 'Server 2008 R2'
    TestDriverExeType: 'x86'
    TestDriverParameters: '"%testfile%"'
    ClosesItself: true
    MaxDurationInSeconds: '5'
    CanRunRepeat: true
    CanTestDriverBeRenamed: false
    SingleOsProcess: false

- task: ModernCop@2
  inputs:
    InputType: 'CommandLine'
    arguments: '/dir:"$(Build.SourcesDirectory)" /groups:sdl'


- task: PoliCheck@2
  inputs:
    targetType: 'F'
    targetArgument: '$(Build.SourcesDirectory)'

- task: PSScriptAnalyzer@1
  inputs:
    Path: '$(Build.SourcesDirectory)'
    Settings: 'required'
    Recurse: true


- task: PublishSecurityAnalysisLogs@3
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'


- task: SDLNativeRules@2
  inputs:
    userProvideBuildInfo: 'auto'

- task: SpotBugs@1
  inputs:
    inputType: 'guardianGlob'
    targetClassGlob: '**.jar;-|.gdn/**;'
    ruleset: 'sdlRecommemded'
    effort: 'max'

- task: VulnerabilityAssessment@0



- task: DropSync@1
  inputs:
    DropSource: 'cloudbuild'
    CloudBuildSource: 'task'
    DropMetadataContainerName: 'DropMetadata'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
